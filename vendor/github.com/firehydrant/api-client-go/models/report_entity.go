// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReportEntity Create a post mortem
// swagger:model ReportEntity
type ReportEntity struct {

	// affected components
	AffectedComponents []*AffectedComponentEntity `json:"affected_components"`

	// affected environments
	AffectedEnvironments []*AffectedEnvironmentEntity `json:"affected_environments"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// incident
	Incident *IncidentEntity `json:"incident,omitempty"`

	// incident id
	IncidentID string `json:"incident_id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// tag list
	TagList string `json:"tag_list,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this report entity
func (m *ReportEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffectedComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffectedEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncident(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportEntity) validateAffectedComponents(formats strfmt.Registry) error {

	if swag.IsZero(m.AffectedComponents) { // not required
		return nil
	}

	for i := 0; i < len(m.AffectedComponents); i++ {
		if swag.IsZero(m.AffectedComponents[i]) { // not required
			continue
		}

		if m.AffectedComponents[i] != nil {
			if err := m.AffectedComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affected_components" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportEntity) validateAffectedEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.AffectedEnvironments) { // not required
		return nil
	}

	for i := 0; i < len(m.AffectedEnvironments); i++ {
		if swag.IsZero(m.AffectedEnvironments[i]) { // not required
			continue
		}

		if m.AffectedEnvironments[i] != nil {
			if err := m.AffectedEnvironments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affected_environments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportEntity) validateIncident(formats strfmt.Registry) error {

	if swag.IsZero(m.Incident) { // not required
		return nil
	}

	if m.Incident != nil {
		if err := m.Incident.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incident")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportEntity) UnmarshalBinary(b []byte) error {
	var res ReportEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
