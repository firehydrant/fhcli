// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IncidentEntity Retrieve an incident
// swagger:model IncidentEntity
type IncidentEntity struct {

	// The time the incident was closed
	// Format: date-time
	ClosedAt strfmt.DateTime `json:"closed_at,omitempty"`

	// The time the incident was opened
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// UUID of the Incident
	ID string `json:"id,omitempty"`

	// incident roles
	IncidentRoles []*IncidentRoleEntity `json:"incident_roles"`

	// Name of the incident
	Name string `json:"name,omitempty"`

	// severity
	Severity string `json:"severity,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`
}

// Validate validates this incident entity
func (m *IncidentEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClosedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncidentRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncidentEntity) validateClosedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("closed_at", "body", "date-time", m.ClosedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IncidentEntity) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IncidentEntity) validateIncidentRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.IncidentRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.IncidentRoles); i++ {
		if swag.IsZero(m.IncidentRoles[i]) { // not required
			continue
		}

		if m.IncidentRoles[i] != nil {
			if err := m.IncidentRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("incident_roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IncidentEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IncidentEntity) UnmarshalBinary(b []byte) error {
	var res IncidentEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
