// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskEntity Update a task
// swagger:model TaskEntity
type TaskEntity struct {

	// assignee
	Assignee *TaskAssigneeEntity `json:"assignee,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// incident role
	IncidentRole *IncidentRoleSuccinctEntity `json:"incident_role,omitempty"`

	// The id of the incident role task if this was task was created from a role
	IncidentRoleTaskID string `json:"incident_role_task_id,omitempty"`

	// notes
	Notes string `json:"notes,omitempty"`

	// position
	Position string `json:"position,omitempty"`

	// state
	// Enum: [todo in_progress wont_do done]
	State string `json:"state,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this task entity
func (m *TaskEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncidentRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskEntity) validateAssignee(formats strfmt.Registry) error {

	if swag.IsZero(m.Assignee) { // not required
		return nil
	}

	if m.Assignee != nil {
		if err := m.Assignee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignee")
			}
			return err
		}
	}

	return nil
}

func (m *TaskEntity) validateIncidentRole(formats strfmt.Registry) error {

	if swag.IsZero(m.IncidentRole) { // not required
		return nil
	}

	if m.IncidentRole != nil {
		if err := m.IncidentRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incident_role")
			}
			return err
		}
	}

	return nil
}

var taskEntityTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["todo","in_progress","wont_do","done"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskEntityTypeStatePropEnum = append(taskEntityTypeStatePropEnum, v)
	}
}

const (

	// TaskEntityStateTodo captures enum value "todo"
	TaskEntityStateTodo string = "todo"

	// TaskEntityStateInProgress captures enum value "in_progress"
	TaskEntityStateInProgress string = "in_progress"

	// TaskEntityStateWontDo captures enum value "wont_do"
	TaskEntityStateWontDo string = "wont_do"

	// TaskEntityStateDone captures enum value "done"
	TaskEntityStateDone string = "done"
)

// prop value enum
func (m *TaskEntity) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskEntityTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskEntity) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskEntity) UnmarshalBinary(b []byte) error {
	var res TaskEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
