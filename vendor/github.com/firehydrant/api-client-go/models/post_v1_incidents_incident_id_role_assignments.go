// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostV1IncidentsIncidentIDRoleAssignments Assign a user to an incident role for the incident
// swagger:model postV1IncidentsIncidentIdRoleAssignments
type PostV1IncidentsIncidentIDRoleAssignments struct {

	// The Incident Role ID to assign the role to
	// Required: true
	IncidentRoleID *string `json:"incident_role_id"`

	// The user ID to assign the role to
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this post v1 incidents incident Id role assignments
func (m *PostV1IncidentsIncidentIDRoleAssignments) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIncidentRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostV1IncidentsIncidentIDRoleAssignments) validateIncidentRoleID(formats strfmt.Registry) error {

	if err := validate.Required("incident_role_id", "body", m.IncidentRoleID); err != nil {
		return err
	}

	return nil
}

func (m *PostV1IncidentsIncidentIDRoleAssignments) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostV1IncidentsIncidentIDRoleAssignments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostV1IncidentsIncidentIDRoleAssignments) UnmarshalBinary(b []byte) error {
	var res PostV1IncidentsIncidentIDRoleAssignments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
