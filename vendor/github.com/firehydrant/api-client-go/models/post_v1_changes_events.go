// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostV1ChangesEvents Create a change event
// swagger:model postV1ChangesEvents
type PostV1ChangesEvents struct {

	// JSON objects representing attachments, see attachments documentation for the schema
	Attachments []*PostV1ChangesEventsAttachmentsItems0 `json:"attachments"`

	// If provided and valid, the event will be linked to all changes that have the same identities
	ChangeIdentities []*PostV1ChangesEventsChangeIdentitiesItems0 `json:"change_identities"`

	// An array of change IDs
	Changes []string `json:"changes"`

	// description
	Description string `json:"description,omitempty"`

	// ends at
	// Format: date-time
	EndsAt strfmt.DateTime `json:"ends_at,omitempty"`

	// An array of environment IDs
	Environments []string `json:"environments"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// An array of service IDs
	Services []string `json:"services"`

	// starts at
	// Format: date-time
	StartsAt strfmt.DateTime `json:"starts_at,omitempty"`

	// summary
	// Required: true
	Summary *string `json:"summary"`
}

// Validate validates this post v1 changes events
func (m *PostV1ChangesEvents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangeIdentities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndsAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartsAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostV1ChangesEvents) validateAttachments(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments); i++ {
		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {
			if err := m.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostV1ChangesEvents) validateChangeIdentities(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangeIdentities) { // not required
		return nil
	}

	for i := 0; i < len(m.ChangeIdentities); i++ {
		if swag.IsZero(m.ChangeIdentities[i]) { // not required
			continue
		}

		if m.ChangeIdentities[i] != nil {
			if err := m.ChangeIdentities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("change_identities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostV1ChangesEvents) validateEndsAt(formats strfmt.Registry) error {

	if swag.IsZero(m.EndsAt) { // not required
		return nil
	}

	if err := validate.FormatOf("ends_at", "body", "date-time", m.EndsAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PostV1ChangesEvents) validateStartsAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartsAt) { // not required
		return nil
	}

	if err := validate.FormatOf("starts_at", "body", "date-time", m.StartsAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PostV1ChangesEvents) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostV1ChangesEvents) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostV1ChangesEvents) UnmarshalBinary(b []byte) error {
	var res PostV1ChangesEvents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PostV1ChangesEventsAttachmentsItems0 post v1 changes events attachments items0
// swagger:model PostV1ChangesEventsAttachmentsItems0
type PostV1ChangesEventsAttachmentsItems0 struct {

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this post v1 changes events attachments items0
func (m *PostV1ChangesEventsAttachmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostV1ChangesEventsAttachmentsItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostV1ChangesEventsAttachmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostV1ChangesEventsAttachmentsItems0) UnmarshalBinary(b []byte) error {
	var res PostV1ChangesEventsAttachmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PostV1ChangesEventsChangeIdentitiesItems0 post v1 changes events change identities items0
// swagger:model PostV1ChangesEventsChangeIdentitiesItems0
type PostV1ChangesEventsChangeIdentitiesItems0 struct {

	// type
	// Required: true
	Type *string `json:"type"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this post v1 changes events change identities items0
func (m *PostV1ChangesEventsChangeIdentitiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostV1ChangesEventsChangeIdentitiesItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PostV1ChangesEventsChangeIdentitiesItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostV1ChangesEventsChangeIdentitiesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostV1ChangesEventsChangeIdentitiesItems0) UnmarshalBinary(b []byte) error {
	var res PostV1ChangesEventsChangeIdentitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
