// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RoleAssignmentEntity Set an assignment to inactive for an assignment role
// swagger:model RoleAssignmentEntity
type RoleAssignmentEntity struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// incident role
	IncidentRole *IncidentRoleEntity `json:"incident_role,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tasks
	Tasks []*TaskEntity `json:"tasks"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// user
	User *UserEntity `json:"user,omitempty"`
}

// Validate validates this role assignment entity
func (m *RoleAssignmentEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIncidentRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleAssignmentEntity) validateIncidentRole(formats strfmt.Registry) error {

	if swag.IsZero(m.IncidentRole) { // not required
		return nil
	}

	if m.IncidentRole != nil {
		if err := m.IncidentRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incident_role")
			}
			return err
		}
	}

	return nil
}

func (m *RoleAssignmentEntity) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RoleAssignmentEntity) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoleAssignmentEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleAssignmentEntity) UnmarshalBinary(b []byte) error {
	var res RoleAssignmentEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
