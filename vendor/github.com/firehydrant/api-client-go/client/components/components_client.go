// Code generated by go-swagger; DO NOT EDIT.

package components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new components API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for components API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteV1ComponentsComponentIDEnvironmentsEnvironmentID Remove an environment to a component
*/
func (a *Client) DeleteV1ComponentsComponentIDEnvironmentsEnvironmentID(params *DeleteV1ComponentsComponentIDEnvironmentsEnvironmentIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1ComponentsComponentIDEnvironmentsEnvironmentIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ComponentsComponentIDEnvironmentsEnvironmentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1ComponentsComponentIdEnvironmentsEnvironmentId",
		Method:             "DELETE",
		PathPattern:        "/v1/components/{component_id}/environments/{environment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1ComponentsComponentIDEnvironmentsEnvironmentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1ComponentsComponentIDEnvironmentsEnvironmentIDNoContent), nil

}

/*
DeleteV1ComponentsComponentIDLabelsKey Remove a label from a component
*/
func (a *Client) DeleteV1ComponentsComponentIDLabelsKey(params *DeleteV1ComponentsComponentIDLabelsKeyParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1ComponentsComponentIDLabelsKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ComponentsComponentIDLabelsKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1ComponentsComponentIdLabelsKey",
		Method:             "DELETE",
		PathPattern:        "/v1/components/{component_id}/labels/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1ComponentsComponentIDLabelsKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1ComponentsComponentIDLabelsKeyNoContent), nil

}

/*
DeleteV1ComponentsID Archive an component
*/
func (a *Client) DeleteV1ComponentsID(params *DeleteV1ComponentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1ComponentsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ComponentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1ComponentsId",
		Method:             "DELETE",
		PathPattern:        "/v1/components/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1ComponentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1ComponentsIDNoContent), nil

}

/*
GetV1Components Retrieve all components
*/
func (a *Client) GetV1Components(params *GetV1ComponentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1Components",
		Method:             "GET",
		PathPattern:        "/v1/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ComponentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ComponentsOK), nil

}

/*
GetV1ComponentsID Retrieve a single component
*/
func (a *Client) GetV1ComponentsID(params *GetV1ComponentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ComponentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComponentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1ComponentsId",
		Method:             "GET",
		PathPattern:        "/v1/components/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ComponentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ComponentsIDOK), nil

}

/*
PatchV1ComponentsComponentIDLabels Add / Update a label on a component
*/
func (a *Client) PatchV1ComponentsComponentIDLabels(params *PatchV1ComponentsComponentIDLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1ComponentsComponentIDLabelsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ComponentsComponentIDLabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1ComponentsComponentIdLabels",
		Method:             "PATCH",
		PathPattern:        "/v1/components/{component_id}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1ComponentsComponentIDLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1ComponentsComponentIDLabelsNoContent), nil

}

/*
PatchV1ComponentsID Update an component
*/
func (a *Client) PatchV1ComponentsID(params *PatchV1ComponentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1ComponentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ComponentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1ComponentsId",
		Method:             "PATCH",
		PathPattern:        "/v1/components/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1ComponentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1ComponentsIDOK), nil

}

/*
PostV1Components Creates an component
*/
func (a *Client) PostV1Components(params *PostV1ComponentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1ComponentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1Components",
		Method:             "POST",
		PathPattern:        "/v1/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ComponentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ComponentsCreated), nil

}

/*
PostV1ComponentsComponentIDEnvironments Add an environment to a component
*/
func (a *Client) PostV1ComponentsComponentIDEnvironments(params *PostV1ComponentsComponentIDEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1ComponentsComponentIDEnvironmentsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ComponentsComponentIDEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1ComponentsComponentIdEnvironments",
		Method:             "POST",
		PathPattern:        "/v1/components/{component_id}/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ComponentsComponentIDEnvironmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ComponentsComponentIDEnvironmentsNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
