// Code generated by go-swagger; DO NOT EDIT.

package changes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new changes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for changes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteV1ChangesChangeID Archive a change entry
*/
func (a *Client) DeleteV1ChangesChangeID(params *DeleteV1ChangesChangeIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1ChangesChangeIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ChangesChangeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1ChangesChangeId",
		Method:             "DELETE",
		PathPattern:        "/v1/changes/{change_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1ChangesChangeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1ChangesChangeIDNoContent), nil

}

/*
DeleteV1ChangesChangeIDIdentitiesIdentityID Delete an identity
*/
func (a *Client) DeleteV1ChangesChangeIDIdentitiesIdentityID(params *DeleteV1ChangesChangeIDIdentitiesIdentityIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1ChangesChangeIDIdentitiesIdentityIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ChangesChangeIDIdentitiesIdentityIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1ChangesChangeIdIdentitiesIdentityId",
		Method:             "DELETE",
		PathPattern:        "/v1/changes/{change_id}/identities/{identity_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1ChangesChangeIDIdentitiesIdentityIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1ChangesChangeIDIdentitiesIdentityIDNoContent), nil

}

/*
DeleteV1ChangesEventsChangeEventID Delete a change event
*/
func (a *Client) DeleteV1ChangesEventsChangeEventID(params *DeleteV1ChangesEventsChangeEventIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1ChangesEventsChangeEventIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ChangesEventsChangeEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1ChangesEventsChangeEventId",
		Method:             "DELETE",
		PathPattern:        "/v1/changes/events/{change_event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1ChangesEventsChangeEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1ChangesEventsChangeEventIDNoContent), nil

}

/*
GetV1Changes Lists all changes
*/
func (a *Client) GetV1Changes(params *GetV1ChangesParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ChangesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1Changes",
		Method:             "GET",
		PathPattern:        "/v1/changes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ChangesOK), nil

}

/*
GetV1ChangesChangeIDIdentities Retrieve all identities for the change
*/
func (a *Client) GetV1ChangesChangeIDIdentities(params *GetV1ChangesChangeIDIdentitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ChangesChangeIDIdentitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ChangesChangeIDIdentitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1ChangesChangeIdIdentities",
		Method:             "GET",
		PathPattern:        "/v1/changes/{change_id}/identities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ChangesChangeIDIdentitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ChangesChangeIDIdentitiesOK), nil

}

/*
GetV1ChangesEvents Retrieve change events
*/
func (a *Client) GetV1ChangesEvents(params *GetV1ChangesEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ChangesEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ChangesEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1ChangesEvents",
		Method:             "GET",
		PathPattern:        "/v1/changes/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ChangesEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ChangesEventsOK), nil

}

/*
GetV1ChangesEventsChangeEventID Retrieve a change event
*/
func (a *Client) GetV1ChangesEventsChangeEventID(params *GetV1ChangesEventsChangeEventIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1ChangesEventsChangeEventIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ChangesEventsChangeEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1ChangesEventsChangeEventId",
		Method:             "GET",
		PathPattern:        "/v1/changes/events/{change_event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ChangesEventsChangeEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ChangesEventsChangeEventIDOK), nil

}

/*
PatchV1ChangesChangeID Update a change entry
*/
func (a *Client) PatchV1ChangesChangeID(params *PatchV1ChangesChangeIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1ChangesChangeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ChangesChangeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1ChangesChangeId",
		Method:             "PATCH",
		PathPattern:        "/v1/changes/{change_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1ChangesChangeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1ChangesChangeIDOK), nil

}

/*
PatchV1ChangesChangeIDIdentitiesIdentityID Update an identity
*/
func (a *Client) PatchV1ChangesChangeIDIdentitiesIdentityID(params *PatchV1ChangesChangeIDIdentitiesIdentityIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1ChangesChangeIDIdentitiesIdentityIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ChangesChangeIDIdentitiesIdentityIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1ChangesChangeIdIdentitiesIdentityId",
		Method:             "PATCH",
		PathPattern:        "/v1/changes/{change_id}/identities/{identity_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1ChangesChangeIDIdentitiesIdentityIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1ChangesChangeIDIdentitiesIdentityIDOK), nil

}

/*
PatchV1ChangesEventsChangeEventID Update a change event
*/
func (a *Client) PatchV1ChangesEventsChangeEventID(params *PatchV1ChangesEventsChangeEventIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1ChangesEventsChangeEventIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ChangesEventsChangeEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1ChangesEventsChangeEventId",
		Method:             "PATCH",
		PathPattern:        "/v1/changes/events/{change_event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1ChangesEventsChangeEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1ChangesEventsChangeEventIDOK), nil

}

/*
PostV1Changes Create a new change entry
*/
func (a *Client) PostV1Changes(params *PostV1ChangesParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1ChangesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ChangesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1Changes",
		Method:             "POST",
		PathPattern:        "/v1/changes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ChangesCreated), nil

}

/*
PostV1ChangesChangeIDIdentities Create an identity for this change
*/
func (a *Client) PostV1ChangesChangeIDIdentities(params *PostV1ChangesChangeIDIdentitiesParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1ChangesChangeIDIdentitiesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ChangesChangeIDIdentitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1ChangesChangeIdIdentities",
		Method:             "POST",
		PathPattern:        "/v1/changes/{change_id}/identities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ChangesChangeIDIdentitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ChangesChangeIDIdentitiesCreated), nil

}

/*
PostV1ChangesEvents Create a change event
*/
func (a *Client) PostV1ChangesEvents(params *PostV1ChangesEventsParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1ChangesEventsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ChangesEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1ChangesEvents",
		Method:             "POST",
		PathPattern:        "/v1/changes/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ChangesEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ChangesEventsCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
