// Code generated by go-swagger; DO NOT EDIT.

package post_mortems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new post mortems API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for post mortems API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteV1PostMortemsReportsReportIDActionItemsActionItemID Delete an action item
*/
func (a *Client) DeleteV1PostMortemsReportsReportIDActionItemsActionItemID(params *DeleteV1PostMortemsReportsReportIDActionItemsActionItemIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1PostMortemsReportsReportIDActionItemsActionItemIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1PostMortemsReportsReportIDActionItemsActionItemIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1PostMortemsReportsReportIdActionItemsActionItemId",
		Method:             "DELETE",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/action_items/{action_item_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1PostMortemsReportsReportIDActionItemsActionItemIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1PostMortemsReportsReportIDActionItemsActionItemIDNoContent), nil

}

/*
DeleteV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventID Remove an event on the report timeline by an incident event ID
*/
func (a *Client) DeleteV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventID(params *DeleteV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1PostMortemsReportsReportIdEventsFromIncidentIncidentEventId",
		Method:             "DELETE",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/events/from_incident/{incident_event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventIDNoContent), nil

}

/*
DeleteV1PostMortemsReportsReportIDEventsReportEventID Remove an event on the report timeline by its ID
*/
func (a *Client) DeleteV1PostMortemsReportsReportIDEventsReportEventID(params *DeleteV1PostMortemsReportsReportIDEventsReportEventIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1PostMortemsReportsReportIDEventsReportEventIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1PostMortemsReportsReportIDEventsReportEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1PostMortemsReportsReportIdEventsReportEventId",
		Method:             "DELETE",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/events/{report_event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1PostMortemsReportsReportIDEventsReportEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1PostMortemsReportsReportIDEventsReportEventIDNoContent), nil

}

/*
DeleteV1PostMortemsReportsReportIDParticipantsParticipantID Remove a participant from a post mortem report
*/
func (a *Client) DeleteV1PostMortemsReportsReportIDParticipantsParticipantID(params *DeleteV1PostMortemsReportsReportIDParticipantsParticipantIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1PostMortemsReportsReportIDParticipantsParticipantIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1PostMortemsReportsReportIDParticipantsParticipantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1PostMortemsReportsReportIdParticipantsParticipantId",
		Method:             "DELETE",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/participants/{participant_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1PostMortemsReportsReportIDParticipantsParticipantIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1PostMortemsReportsReportIDParticipantsParticipantIDNoContent), nil

}

/*
DeleteV1PostMortemsReportsReportIDReasonsReasonID Deletes a reason from a report
*/
func (a *Client) DeleteV1PostMortemsReportsReportIDReasonsReasonID(params *DeleteV1PostMortemsReportsReportIDReasonsReasonIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1PostMortemsReportsReportIDReasonsReasonIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1PostMortemsReportsReportIDReasonsReasonIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1PostMortemsReportsReportIdReasonsReasonId",
		Method:             "DELETE",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons/{reason_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1PostMortemsReportsReportIDReasonsReasonIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1PostMortemsReportsReportIDReasonsReasonIDNoContent), nil

}

/*
DeleteV1PostMortemsReportsReportIDRelatedChangesRelatedChangeID Delete a related change from the post mortem report
*/
func (a *Client) DeleteV1PostMortemsReportsReportIDRelatedChangesRelatedChangeID(params *DeleteV1PostMortemsReportsReportIDRelatedChangesRelatedChangeIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1PostMortemsReportsReportIDRelatedChangesRelatedChangeIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1PostMortemsReportsReportIDRelatedChangesRelatedChangeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1PostMortemsReportsReportIdRelatedChangesRelatedChangeId",
		Method:             "DELETE",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/related_changes/{related_change_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1PostMortemsReportsReportIDRelatedChangesRelatedChangeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1PostMortemsReportsReportIDRelatedChangesRelatedChangeIDNoContent), nil

}

/*
DeleteV1PostMortemsReportsReportIDTags Remove tags from a report
*/
func (a *Client) DeleteV1PostMortemsReportsReportIDTags(params *DeleteV1PostMortemsReportsReportIDTagsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV1PostMortemsReportsReportIDTagsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1PostMortemsReportsReportIDTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1PostMortemsReportsReportIdTags",
		Method:             "DELETE",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1PostMortemsReportsReportIDTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1PostMortemsReportsReportIDTagsNoContent), nil

}

/*
GetV1PostMortemsReports Retrieve post mortem reports
*/
func (a *Client) GetV1PostMortemsReports(params *GetV1PostMortemsReportsParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1PostMortemsReportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1PostMortemsReports",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1PostMortemsReportsOK), nil

}

/*
GetV1PostMortemsReportsReportID Retrieve a single post mortem report
*/
func (a *Client) GetV1PostMortemsReportsReportID(params *GetV1PostMortemsReportsReportIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1PostMortemsReportsReportIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsReportIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1PostMortemsReportsReportId",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReportIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1PostMortemsReportsReportIDOK), nil

}

/*
GetV1PostMortemsReportsReportIDActionItems List action items for a repo
*/
func (a *Client) GetV1PostMortemsReportsReportIDActionItems(params *GetV1PostMortemsReportsReportIDActionItemsParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1PostMortemsReportsReportIDActionItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsReportIDActionItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1PostMortemsReportsReportIdActionItems",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/action_items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReportIDActionItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1PostMortemsReportsReportIDActionItemsOK), nil

}

/*
GetV1PostMortemsReportsReportIDEvents Retrieve report events
*/
func (a *Client) GetV1PostMortemsReportsReportIDEvents(params *GetV1PostMortemsReportsReportIDEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1PostMortemsReportsReportIDEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsReportIDEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1PostMortemsReportsReportIdEvents",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReportIDEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1PostMortemsReportsReportIDEventsOK), nil

}

/*
GetV1PostMortemsReportsReportIDIncidentEvents get v1 post mortems reports report Id incident events API
*/
func (a *Client) GetV1PostMortemsReportsReportIDIncidentEvents(params *GetV1PostMortemsReportsReportIDIncidentEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1PostMortemsReportsReportIDIncidentEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsReportIDIncidentEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1PostMortemsReportsReportIdIncidentEvents",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/incident_events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReportIDIncidentEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1PostMortemsReportsReportIDIncidentEventsOK), nil

}

/*
GetV1PostMortemsReportsReportIDParticipants List participants for a post mortem report
*/
func (a *Client) GetV1PostMortemsReportsReportIDParticipants(params *GetV1PostMortemsReportsReportIDParticipantsParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1PostMortemsReportsReportIDParticipantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsReportIDParticipantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1PostMortemsReportsReportIdParticipants",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/participants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReportIDParticipantsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1PostMortemsReportsReportIDParticipantsOK), nil

}

/*
GetV1PostMortemsReportsReportIDParticipantsSearch List possible participants based on name, includes users and teams
*/
func (a *Client) GetV1PostMortemsReportsReportIDParticipantsSearch(params *GetV1PostMortemsReportsReportIDParticipantsSearchParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1PostMortemsReportsReportIDParticipantsSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsReportIDParticipantsSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1PostMortemsReportsReportIdParticipantsSearch",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/participants/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReportIDParticipantsSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1PostMortemsReportsReportIDParticipantsSearchOK), nil

}

/*
GetV1PostMortemsReportsReportIDReasons Retrieve post mortem report reasons
*/
func (a *Client) GetV1PostMortemsReportsReportIDReasons(params *GetV1PostMortemsReportsReportIDReasonsParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1PostMortemsReportsReportIDReasonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsReportIDReasonsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1PostMortemsReportsReportIdReasons",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReportIDReasonsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1PostMortemsReportsReportIDReasonsOK), nil

}

/*
GetV1PostMortemsReportsReportIDRelatedChanges Retrieve all related changes for the report
*/
func (a *Client) GetV1PostMortemsReportsReportIDRelatedChanges(params *GetV1PostMortemsReportsReportIDRelatedChangesParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1PostMortemsReportsReportIDRelatedChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsReportIDRelatedChangesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1PostMortemsReportsReportIdRelatedChanges",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/related_changes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReportIDRelatedChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1PostMortemsReportsReportIDRelatedChangesOK), nil

}

/*
GetV1PostMortemsReportsReportIDSectionsReportStep Retrieve sections for a post mortem report
*/
func (a *Client) GetV1PostMortemsReportsReportIDSectionsReportStep(params *GetV1PostMortemsReportsReportIDSectionsReportStepParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1PostMortemsReportsReportIDSectionsReportStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsReportsReportIDSectionsReportStepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1PostMortemsReportsReportIdSectionsReportStep",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/sections/{report_step}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1PostMortemsReportsReportIDSectionsReportStepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1PostMortemsReportsReportIDSectionsReportStepOK), nil

}

/*
GetV1PostMortemsTags List tags for post mortems
*/
func (a *Client) GetV1PostMortemsTags(params *GetV1PostMortemsTagsParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1PostMortemsTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1PostMortemsTags",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1PostMortemsTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1PostMortemsTagsOK), nil

}

/*
GetV1PostMortemsTemplates Retrieve post mortem templates
*/
func (a *Client) GetV1PostMortemsTemplates(params *GetV1PostMortemsTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetV1PostMortemsTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PostMortemsTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1PostMortemsTemplates",
		Method:             "GET",
		PathPattern:        "/v1/post_mortems/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1PostMortemsTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1PostMortemsTemplatesOK), nil

}

/*
PatchV1PostMortemsReportsReportID Update a post mortem report
*/
func (a *Client) PatchV1PostMortemsReportsReportID(params *PatchV1PostMortemsReportsReportIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1PostMortemsReportsReportIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PostMortemsReportsReportIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1PostMortemsReportsReportId",
		Method:             "PATCH",
		PathPattern:        "/v1/post_mortems/reports/{report_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1PostMortemsReportsReportIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1PostMortemsReportsReportIDOK), nil

}

/*
PatchV1PostMortemsReportsReportIDActionItemsActionItemID Update an action item
*/
func (a *Client) PatchV1PostMortemsReportsReportIDActionItemsActionItemID(params *PatchV1PostMortemsReportsReportIDActionItemsActionItemIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1PostMortemsReportsReportIDActionItemsActionItemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PostMortemsReportsReportIDActionItemsActionItemIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1PostMortemsReportsReportIdActionItemsActionItemId",
		Method:             "PATCH",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/action_items/{action_item_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1PostMortemsReportsReportIDActionItemsActionItemIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1PostMortemsReportsReportIDActionItemsActionItemIDOK), nil

}

/*
PatchV1PostMortemsReportsReportIDEventsNotesNoteID Update a post mortem note
*/
func (a *Client) PatchV1PostMortemsReportsReportIDEventsNotesNoteID(params *PatchV1PostMortemsReportsReportIDEventsNotesNoteIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1PostMortemsReportsReportIDEventsNotesNoteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PostMortemsReportsReportIDEventsNotesNoteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1PostMortemsReportsReportIdEventsNotesNoteId",
		Method:             "PATCH",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/events/notes/{note_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1PostMortemsReportsReportIDEventsNotesNoteIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1PostMortemsReportsReportIDEventsNotesNoteIDOK), nil

}

/*
PatchV1PostMortemsReportsReportIDFieldsFieldID Update a field value on a post mortem report
*/
func (a *Client) PatchV1PostMortemsReportsReportIDFieldsFieldID(params *PatchV1PostMortemsReportsReportIDFieldsFieldIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1PostMortemsReportsReportIDFieldsFieldIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PostMortemsReportsReportIDFieldsFieldIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1PostMortemsReportsReportIdFieldsFieldId",
		Method:             "PATCH",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/fields/{field_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1PostMortemsReportsReportIDFieldsFieldIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1PostMortemsReportsReportIDFieldsFieldIDOK), nil

}

/*
PatchV1PostMortemsReportsReportIDReasonsReasonID Updates a reason for a report
*/
func (a *Client) PatchV1PostMortemsReportsReportIDReasonsReasonID(params *PatchV1PostMortemsReportsReportIDReasonsReasonIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1PostMortemsReportsReportIDReasonsReasonIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PostMortemsReportsReportIDReasonsReasonIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1PostMortemsReportsReportIdReasonsReasonId",
		Method:             "PATCH",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons/{reason_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1PostMortemsReportsReportIDReasonsReasonIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1PostMortemsReportsReportIDReasonsReasonIDOK), nil

}

/*
PatchV1PostMortemsReportsReportIDRelatedChangesRelatedChangeID Update a related change object
*/
func (a *Client) PatchV1PostMortemsReportsReportIDRelatedChangesRelatedChangeID(params *PatchV1PostMortemsReportsReportIDRelatedChangesRelatedChangeIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchV1PostMortemsReportsReportIDRelatedChangesRelatedChangeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PostMortemsReportsReportIDRelatedChangesRelatedChangeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchV1PostMortemsReportsReportIdRelatedChangesRelatedChangeId",
		Method:             "PATCH",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/related_changes/{related_change_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1PostMortemsReportsReportIDRelatedChangesRelatedChangeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchV1PostMortemsReportsReportIDRelatedChangesRelatedChangeIDOK), nil

}

/*
PostV1PostMortemsReports Create a post mortem
*/
func (a *Client) PostV1PostMortemsReports(params *PostV1PostMortemsReportsParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1PostMortemsReportsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PostMortemsReportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1PostMortemsReports",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1PostMortemsReportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1PostMortemsReportsCreated), nil

}

/*
PostV1PostMortemsReportsReportIDActionItems Create an action item on a report
*/
func (a *Client) PostV1PostMortemsReportsReportIDActionItems(params *PostV1PostMortemsReportsReportIDActionItemsParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1PostMortemsReportsReportIDActionItemsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PostMortemsReportsReportIDActionItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1PostMortemsReportsReportIdActionItems",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/action_items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1PostMortemsReportsReportIDActionItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1PostMortemsReportsReportIDActionItemsCreated), nil

}

/*
PostV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventID Add an event to the report timeline
*/
func (a *Client) PostV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventID(params *PostV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1PostMortemsReportsReportIdEventsFromIncidentIncidentEventId",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/events/from_incident/{incident_event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1PostMortemsReportsReportIDEventsFromIncidentIncidentEventIDCreated), nil

}

/*
PostV1PostMortemsReportsReportIDEventsNotes Create a post mortem note
*/
func (a *Client) PostV1PostMortemsReportsReportIDEventsNotes(params *PostV1PostMortemsReportsReportIDEventsNotesParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1PostMortemsReportsReportIDEventsNotesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PostMortemsReportsReportIDEventsNotesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1PostMortemsReportsReportIdEventsNotes",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/events/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1PostMortemsReportsReportIDEventsNotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1PostMortemsReportsReportIDEventsNotesCreated), nil

}

/*
PostV1PostMortemsReportsReportIDParticipants Add a participant to the post mortem report
*/
func (a *Client) PostV1PostMortemsReportsReportIDParticipants(params *PostV1PostMortemsReportsReportIDParticipantsParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1PostMortemsReportsReportIDParticipantsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PostMortemsReportsReportIDParticipantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1PostMortemsReportsReportIdParticipants",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/participants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1PostMortemsReportsReportIDParticipantsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1PostMortemsReportsReportIDParticipantsCreated), nil

}

/*
PostV1PostMortemsReportsReportIDReasons Add a post mortem reason to the report
*/
func (a *Client) PostV1PostMortemsReportsReportIDReasons(params *PostV1PostMortemsReportsReportIDReasonsParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1PostMortemsReportsReportIDReasonsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PostMortemsReportsReportIDReasonsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1PostMortemsReportsReportIdReasons",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1PostMortemsReportsReportIDReasonsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1PostMortemsReportsReportIDReasonsCreated), nil

}

/*
PostV1PostMortemsReportsReportIDRelatedChanges Add a related change to the post mortem report
*/
func (a *Client) PostV1PostMortemsReportsReportIDRelatedChanges(params *PostV1PostMortemsReportsReportIDRelatedChangesParams, authInfo runtime.ClientAuthInfoWriter) (*PostV1PostMortemsReportsReportIDRelatedChangesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PostMortemsReportsReportIDRelatedChangesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1PostMortemsReportsReportIdRelatedChanges",
		Method:             "POST",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/related_changes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1PostMortemsReportsReportIDRelatedChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1PostMortemsReportsReportIDRelatedChangesCreated), nil

}

/*
PutV1PostMortemsReportsReportIDReasonsOrder Reorder a reason in the post mortem reasons list
*/
func (a *Client) PutV1PostMortemsReportsReportIDReasonsOrder(params *PutV1PostMortemsReportsReportIDReasonsOrderParams, authInfo runtime.ClientAuthInfoWriter) (*PutV1PostMortemsReportsReportIDReasonsOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1PostMortemsReportsReportIDReasonsOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putV1PostMortemsReportsReportIdReasonsOrder",
		Method:             "PUT",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/reasons/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV1PostMortemsReportsReportIDReasonsOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1PostMortemsReportsReportIDReasonsOrderOK), nil

}

/*
PutV1PostMortemsReportsReportIDTags Add tags to a report
*/
func (a *Client) PutV1PostMortemsReportsReportIDTags(params *PutV1PostMortemsReportsReportIDTagsParams, authInfo runtime.ClientAuthInfoWriter) (*PutV1PostMortemsReportsReportIDTagsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1PostMortemsReportsReportIDTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putV1PostMortemsReportsReportIdTags",
		Method:             "PUT",
		PathPattern:        "/v1/post_mortems/reports/{report_id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV1PostMortemsReportsReportIDTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1PostMortemsReportsReportIDTagsNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
