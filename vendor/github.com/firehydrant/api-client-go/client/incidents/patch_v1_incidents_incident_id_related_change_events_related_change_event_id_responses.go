// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/firehydrant/api-client-go/models"
)

// PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDReader is a Reader for the PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventID structure.
type PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDOK creates a PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDOK with default headers values
func NewPatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDOK() *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDOK {
	return &PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDOK{}
}

/*PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDOK handles this case with default header values.

Update a change event
*/
type PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDOK struct {
	Payload *models.RelatedChangeEventEntity
}

func (o *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/incidents/{incident_id}/related_change_events/{related_change_event_id}][%d] patchV1IncidentsIncidentIdRelatedChangeEventsRelatedChangeEventIdOK  %+v", 200, o.Payload)
}

func (o *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RelatedChangeEventEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDBadRequest creates a PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDBadRequest with default headers values
func NewPatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDBadRequest() *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDBadRequest {
	return &PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDBadRequest{}
}

/*PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDBadRequest handles this case with default header values.

Bad Request
*/
type PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDBadRequest struct {
	Payload *models.ErrorEntity
}

func (o *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/incidents/{incident_id}/related_change_events/{related_change_event_id}][%d] patchV1IncidentsIncidentIdRelatedChangeEventsRelatedChangeEventIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDConflict creates a PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDConflict with default headers values
func NewPatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDConflict() *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDConflict {
	return &PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDConflict{}
}

/*PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDConflict handles this case with default header values.

Already Added
*/
type PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDConflict struct {
	Payload *models.ErrorEntity
}

func (o *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/incidents/{incident_id}/related_change_events/{related_change_event_id}][%d] patchV1IncidentsIncidentIdRelatedChangeEventsRelatedChangeEventIdConflict  %+v", 409, o.Payload)
}

func (o *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
