// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetV1IncidentsParams creates a new GetV1IncidentsParams object
// with the default values initialized.
func NewGetV1IncidentsParams() *GetV1IncidentsParams {
	var ()
	return &GetV1IncidentsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1IncidentsParamsWithTimeout creates a new GetV1IncidentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetV1IncidentsParamsWithTimeout(timeout time.Duration) *GetV1IncidentsParams {
	var ()
	return &GetV1IncidentsParams{

		timeout: timeout,
	}
}

// NewGetV1IncidentsParamsWithContext creates a new GetV1IncidentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetV1IncidentsParamsWithContext(ctx context.Context) *GetV1IncidentsParams {
	var ()
	return &GetV1IncidentsParams{

		Context: ctx,
	}
}

// NewGetV1IncidentsParamsWithHTTPClient creates a new GetV1IncidentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetV1IncidentsParamsWithHTTPClient(client *http.Client) *GetV1IncidentsParams {
	var ()
	return &GetV1IncidentsParams{
		HTTPClient: client,
	}
}

/*GetV1IncidentsParams contains all the parameters to send to the API endpoint
for the get v1 incidents operation typically these are written to a http.Request
*/
type GetV1IncidentsParams struct {

	/*Environments
	  A comma separated list of environment IDs

	*/
	Environments *string
	/*Page*/
	Page *int32
	/*PerPage*/
	PerPage *int32
	/*Query
	  A text query for an incident that searches on name, summary, and desciption

	*/
	Query *string
	/*Services
	  A comma separated list of service IDs

	*/
	Services *string
	/*Severity
	  A text value of severity

	*/
	Severity *string
	/*StartDate
	  The start date to return incidents from

	*/
	StartDate *strfmt.Date
	/*Status
	  Incident status

	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get v1 incidents params
func (o *GetV1IncidentsParams) WithTimeout(timeout time.Duration) *GetV1IncidentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 incidents params
func (o *GetV1IncidentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 incidents params
func (o *GetV1IncidentsParams) WithContext(ctx context.Context) *GetV1IncidentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 incidents params
func (o *GetV1IncidentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 incidents params
func (o *GetV1IncidentsParams) WithHTTPClient(client *http.Client) *GetV1IncidentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 incidents params
func (o *GetV1IncidentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironments adds the environments to the get v1 incidents params
func (o *GetV1IncidentsParams) WithEnvironments(environments *string) *GetV1IncidentsParams {
	o.SetEnvironments(environments)
	return o
}

// SetEnvironments adds the environments to the get v1 incidents params
func (o *GetV1IncidentsParams) SetEnvironments(environments *string) {
	o.Environments = environments
}

// WithPage adds the page to the get v1 incidents params
func (o *GetV1IncidentsParams) WithPage(page *int32) *GetV1IncidentsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get v1 incidents params
func (o *GetV1IncidentsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPerPage adds the perPage to the get v1 incidents params
func (o *GetV1IncidentsParams) WithPerPage(perPage *int32) *GetV1IncidentsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get v1 incidents params
func (o *GetV1IncidentsParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithQuery adds the query to the get v1 incidents params
func (o *GetV1IncidentsParams) WithQuery(query *string) *GetV1IncidentsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get v1 incidents params
func (o *GetV1IncidentsParams) SetQuery(query *string) {
	o.Query = query
}

// WithServices adds the services to the get v1 incidents params
func (o *GetV1IncidentsParams) WithServices(services *string) *GetV1IncidentsParams {
	o.SetServices(services)
	return o
}

// SetServices adds the services to the get v1 incidents params
func (o *GetV1IncidentsParams) SetServices(services *string) {
	o.Services = services
}

// WithSeverity adds the severity to the get v1 incidents params
func (o *GetV1IncidentsParams) WithSeverity(severity *string) *GetV1IncidentsParams {
	o.SetSeverity(severity)
	return o
}

// SetSeverity adds the severity to the get v1 incidents params
func (o *GetV1IncidentsParams) SetSeverity(severity *string) {
	o.Severity = severity
}

// WithStartDate adds the startDate to the get v1 incidents params
func (o *GetV1IncidentsParams) WithStartDate(startDate *strfmt.Date) *GetV1IncidentsParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get v1 incidents params
func (o *GetV1IncidentsParams) SetStartDate(startDate *strfmt.Date) {
	o.StartDate = startDate
}

// WithStatus adds the status to the get v1 incidents params
func (o *GetV1IncidentsParams) WithStatus(status *string) *GetV1IncidentsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get v1 incidents params
func (o *GetV1IncidentsParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1IncidentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Environments != nil {

		// query param environments
		var qrEnvironments string
		if o.Environments != nil {
			qrEnvironments = *o.Environments
		}
		qEnvironments := qrEnvironments
		if qEnvironments != "" {
			if err := r.SetQueryParam("environments", qEnvironments); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Query != nil {

		// query param query
		var qrQuery string
		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {
			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}

	}

	if o.Services != nil {

		// query param services
		var qrServices string
		if o.Services != nil {
			qrServices = *o.Services
		}
		qServices := qrServices
		if qServices != "" {
			if err := r.SetQueryParam("services", qServices); err != nil {
				return err
			}
		}

	}

	if o.Severity != nil {

		// query param severity
		var qrSeverity string
		if o.Severity != nil {
			qrSeverity = *o.Severity
		}
		qSeverity := qrSeverity
		if qSeverity != "" {
			if err := r.SetQueryParam("severity", qSeverity); err != nil {
				return err
			}
		}

	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate strfmt.Date
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {
			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
